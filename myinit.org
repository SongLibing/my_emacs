#+STARTUP: overview
#+begin_src emacs-lisp :comments no :tangle yes
  ;; -*- lexical-binding: t -*-
#+end_src
* Repos
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq use-package-always-ensure t)
  ;; Disable package initialize after us.  We either initialize it
  ;; anyway in case of interpreted .emacs, or we don't want slow
  ;; initizlization in case of byte-compiled .emacs.elc.
  (setq package-enable-at-startup nil)
  ;; Ask package.el to not add (package-initialize) to .emacs.
  (setq package--init-file-ensured t)
  (setq package-archives '(("gnu"   . "http://1.15.88.122/gnu/")
                           ("melpa" . "http://1.15.88.122/melpa/")
                           ("org" . "http://1.15.88.122/org/")))
  ;; Bootstrap 'use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (defun set_window_dedicated ()
    (set-window-dedicated-p (current-buffer)))
  (defun next-lines ()
    (interactive)
    (forward-line 5))
  (defun previous-lines ()
    (interactive)
    (forward-line -5))

  (defun my-xref-next-line()
    (interactive)
    (switch-to-buffer "*xref*")
    (xref-next-line-no-show)
    (xref-goto-xref))

  (defun my-xref-prev-line()
    (interactive)
    (switch-to-buffer "*xref*")
    (xref-prev-line-no-show)
    (xref-goto-xref))

  ;;(global-set-key (kbd "M-n") 'next-lines)
  ;;(global-set-key (kbd "M-p") 'previous-lines)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-c f") 'clang-format-buffer)
  (global-set-key (kbd "C-c r") 'clang-format-region)
  (global-set-key (kbd "C-<") 'previous-buffer)
  (global-set-key (kbd "C->") 'next-buffer)
  (global-set-key (kbd "C-?") 'pop-gloal-mark)
  (global-set-key (kbd "C-x ,") 'my-xref-next-line)
  (global-set-key (kbd "C-x .") 'my-xref-prev-line)
  (global-set-key (kbd "C-.") 'hippie-expand)
  (global-set-key (kbd "C-<") 'pop-gloal-mark)
  #+END_SRC
* Init Setting
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))

  ;;;;;;;;;
  ;; By default Emacs triggers garbage collection at ~0.8MB which makes
  ;; startup really slow. Since most systems have at least 64MB of memory,
  ;; we increase it during initialization.
  (setq gc-cons-threshold 256000000)
  ;; restore after startup
  ;;(add-hook 'after-init-hook #'(lambda ()
  ;;                               (setq gc-cons-threshold 800000)))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Start emacs server if not already running
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;(if (and (fboundp 'server-running-p)
  ;;         (not (server-running-p)))
  ;;    (server-start))

  ;; Prevent emacs from creating a bckup file filename
  (setq make-backup-files nil)

  ;; Remove trailing white space upon saving
  ;; Note: because of a bug in EIN we only delete trailing whitespace
  ;; when not in EIN mode.
  ;;(add-hook 'before-save-hook
  ;;          (lambda ()
  ;;            (when (derived-mode-p 'c++-mode))
  ;;              (delete-trailing-whitespace)))

  ;; Auto-wrap at 80 characters
  (setq-default auto-fill-function 'do-auto-fill)
  (setq-default fill-column 80)
  (turn-on-auto-fill)
  ;; Disable auto-fill-mode in programming mode
  (add-hook 'prog-mode-hook (lambda ()
                              (auto-fill-mode -1)))

  ;; Change tab key behavior to insert spaces instead
  (setq-default indent-tabs-mode nil)
  ;; Set the number of spaces that the tab key inserts (usually 2 or 4)
  (setq c-basic-offset 2)
  ;; Set the size that a tab CHARACTER is interpreted as
  ;; (unnecessary if there are no tab characters in the file!)
  (setq tab-width 2)
  ;; Show <tab> as two spaces
  (standard-display-ascii ?\t "  ")

  ;; Show ediff windows horizontally
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-diff-options "-w")

  (winner-mode t)
  (desktop-save-mode t)

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match that used
      by the user's shell. This is particularly useful under Mac OSX, where GUI
      apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
  (set-exec-path-from-shell-PATH)
  (setq split-height-threshold nil)
  (setq split-width-threshold 140)
  (custom-set-variables '(window-min-width 80))
  (custom-set-variables '(window-min-high 80))
#+END_SRC
* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  ;; use y instead of yes to answer
  (fset 'yes-or-no-p 'y-or-n-p)
  (column-number-mode t)
  (setq ring-bell-function 'ignore)
  (setq require-final-newline t)

  (add-to-list 'default-frame-alist
               '(font . "JetBrains Mono-15"))
  ;; Theme
  (use-package
    smart-mode-line-powerline-theme
    :ensure t
    :config (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'powerline)
    (sml/setup))
  (use-package spacemacs-theme
    :ensure t)
  (custom-set-variables '(spacemacs-theme-comment-bg nil)
                        '(spacemacs-theme-custom-colors '((bg1 . "#442538")
                                                          (comment . "#7fff00"))))
  (load-theme 'spacemacs-dark t)
  ;;(set-background-color "#300a24")
  (set-background-color "#442538")
  (use-package
    spaceline
    :ensure t
    :config (setq powerline-default-separator 'slant)
    (spaceline-emacs-theme))

  ;; Highlights the current cursor line
  (global-hl-line-mode t)
  (set-cursor-color "yellow")
  (setq default-cursor-type 'hbar)
  (set-face-background hl-line-face "darkred")
  ;;(set-face-background hl-line-face "yellow4")
  ;;(set-face-background 'hl-line "#372E2D")
  ;; highlights trailing spaces tabs and lines exceeding 80 columns
  (setq whitespace-style '(face trailing tabs lines-tail))
  (define-global-minor-mode my-global-whitespace-mode whitespace-mode
    (lambda ()
      (unless (derived-mode-p 'vterm-mode 'term-mode)
        (whitespace-mode t)))
    )
  (my-global-whitespace-mode t)

  ;; font scaling
  (defun scale-increase()
    (interactive)
    (default-text-scale-increase)
    (spaceline-emacs-theme))
  (defun scale-decrease()
    (interactive)
    (default-text-scale-decrease)
    (spaceline-emacs-theme))
  (use-package
    default-text-scale
    :ensure t
    :config (global-set-key (kbd "C-M-=") 'scale-increase)
    (global-set-key (kbd "C-M--") 'scale-decrease))
#+END_SRC
* Ansi-term
#+BEGIN_SRC emacs-lisp
  (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
    (if (memq (process-status proc)
              '(signal
                exit))
        (let ((buffer (process-buffer proc))) ad-do-it (kill-buffer buffer))
      ad-do-it))
  (ad-activate 'term-sentinel)

  (defvar my-term-shell "bash")

  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (defun my-term-paste
      (&optional
       string)
    (interactive)
    (process-send-string (get-buffer-process (current-buffer))
                         (if string string (current-kill 0))))

  (defun my-term-hook ()
    (goto-address-mode)
    (define-key term-raw-map "\C-y" 'my-term-paste))

  (add-hook 'term-mode-hook 'my-term-hook)
  ;;(ansi-term my-term-shell)
  ;;(ansi-term my-term-shell)
#+END_SRC
* Vterm
#+BEGIN_SRC emacs-lisp
  (use-package xterm-color
    :ensure t)
  (use-package vterm
    :ensure t)

  (vterm "vterm")
  (vterm "vterm")
#+END_SRC
* IBUFFER
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default" ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("web" (or (mode . web-mode)
                            (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode)
                              (mode . shell-mode)))
                 ("mu4e" (or (mode . mu4e-compose-mode)
                             (name . "\*mu4e\*")))
                 ("programming" (or (mode . python-mode)
                                    (mode . c++-mode)))
                 ("emacs" (or (name . "^\\*scratch\\*$")
                              (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook (lambda ()
                                 (ibuffer-auto-mode 1)
                                 (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+END_SRC
* rg
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t
    :config (rg-enable-default-bindings))
#+END_SRC

* irc
(setq rcirc-default-nick "Libing")
(setq rcirc-default-full-name "Libing Song")

* Key frequent statistics
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
    (setq keyfreq-autosave-mode t)
    (setq keyfreq-autosave-timeout 10))
#+END_SRC

* Elisp
Using elisp-format to format elisp code in a buffer
#+BEGIN_SRC emacs-lisp
  (use-package elisp-format
    :ensure t)

  (defun my-format-elisp ()
    (interactive)
    (elisp-format-buffer)
    (delete-trailing-whitespace))

  (add-hook 'lisp-mode-hook
    (lambda() (define-key lisp-mode-map (kbd "M-l") 'my-format-elisp)))
#+END_SRC
* Org mode
Org bullets makes things look pretty
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  (setenv "BROWSER" "firefox")

  ;; use bullet sign '*' instead of '*'
  ;;(use-package
  ;;  org-bullets
  ;;  :ensure t
  ;;  :config (add-hook 'org-mode-hook (lambda ()
  ;;                                     (org-bullets-mode 1))))

  (custom-set-variables '(org-directory "~/Dropbox/orgfiles")
                        '(org-default-notes-file (concat org-directory "/notes.org"))
                        '(org-export-html-postamble nil)
                        '(org-hide-leading-stars t)
                        '(org-startup-folded (quote overview))
                        '(org-startup-indented t))

  (setq org-file-apps (append '(("\\.pdf\\'" . "evince %s")) org-file-apps ))
  (global-set-key "\C-ca" 'org-agenda)
  (setq org-agenda-custom-commands '(("c" "Simple agenda view" ((agenda "")
                                                                (alltodo "")))))
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org" "~/Dropbox/orgfiles/i.org"
                               "~/Dropbox/orgfiles/schedule.org"))
  (setq org-capture-templates '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
                                 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                                ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org"
                                                                 "Links") "* %? %^L %^g \n%T"
                                                                 :prepend t)
                                ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org"
                                                                      "Blog Topics:") "* %?\n%T"
                                                                      :prepend t)
                                ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org"
                                                                       "To Do") "* TODO %?\n%u"
                                                                       :prepend t)
                                ("m" "Mail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org"
                                                                       "To Do") "* TODO %a\n %?"
                                                                       :prepend t)
                                ("g" "GMail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org"
                                                                        "To Do") "* TODO %^L\n %?"
                                                                        :prepend t)
                                ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org"
                                                                 "Note space") "* %?\n%u"
                                                                 :prepend t)))
  ;;(setq org-capture-templates '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
  ;;                               "* TODO %?\n:PROPERTIES:\nDEADLINE: %^T \n\n:END:\n %i\n")
  ;;                              ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org"
  ;;                                                               "Links") "* %? %^L %^g \n%T"
  ;;                                                               :prepend t)
  ;;                              ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org"
  ;;                                                                    "Blog Topics:") "* %?\n%T"
  ;;                                                                    :prepend t)
  ;;                              ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org"
  ;;                                                                     "To Do") "* TODO %?\n%u"
  ;;                                                                     :prepend t)
  ;;                              ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org"
  ;;                                                               "Note space") "* %?\n%u"
  ;;                                                               :prepend t)
  ;;                              ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
  ;;                               "* %?\nEntered on %U\n  %i\n  %a")
  ;;                              ("s" "Screencast" entry (file
  ;;                                                       "~/Dropbox/orgfiles/screencastnotes.org")
  ;;                               "* %?\n%i\n")))

  (defadvice org-capture-finalize (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame."
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
  (defadvice org-capture-destroy (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame."
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))
  (use-package
    noflet
    :ensure t)
  (defun make-capture-frame ()
    "Create a new frame and run 'org-capture'."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf)
                                            (switch-to-buffer buf)))
      (org-capture)))

  (require 'ox-beamer)

  ;; for inserting inactive dates
  (define-key org-mode-map (kbd "C-c >")
    (lambda ()
      (interactive (org-time-stamp-inactive))))
  #+END_SRC

  #+RESULTS:
  : make-capture-frame

* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode))
#+END_SRC

* Which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC
* Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
    (use-package
      ace-window
      :ensure t
      :init
      (progn
        (setq aw-scope 'frame)
        (global-set-key (kbd "C-x O") 'other-frame)
        (setq aw-keys '(?f ?j ?d ?k ?s ?l ?g ?h ?\;))
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces '(aw-leading-char-face ((t
                                                   (:inherit ace-jump-face-foreground
                                                             :height 3.0)))))))
  #+END_SRC

  #+RESULTS:

* Vertico Consult marginalia corfu
#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (use-package
    vertico
    :custom
    (vertico-count 10)
    (vertico-resize t)
    (vertico-cycle t)
    :init
    (vertico-mode)
    :bind
    (:map vertico-map
          ("M-q" . vertico-quick-jump)
          ("C-q" . vertico-quick-exit))
    (:map minibuffer-local-map
          ("C-s" . next-line)
          ("C-r" . previous-line)
          ("C-o" . embark-export)))

  (use-package
    orderless
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (defun my-vertico-posframe-frame-center (info)
    (cons (/ (- (plist-get info :parent-frame-width)
                (plist-get info :posframe-width))
             2)
          (/ (- (plist-get info :parent-frame-height)
                (* (line-pixel-height) (+ 1 vertico-count)))
             2)))

  (defun my-vertico-posframe-poshandler (info)
    (my-vertico-posframe-frame-center info))

  (use-package
    vertico-posframe
    :after vertico
    :custom
    (vertico-posframe-width 120)
    (vertico-posframe-parameters
     '((left-fringe . 4)
       (right-fringe . 4)))
    (vertico-posframe-poshandler #'my-vertico-posframe-poshandler)
    :init (vertico-posframe-mode t))

  ;; posframe auto resize
  (cl-defmethod vertico--resize-window (height &context (vertico-posframe-mode (eql t)))
    (unless (not vertico-resize) (setq vertico-posframe-height (+ 1 height))))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package
    marginalia
    :init
    (marginalia-mode))

  ;; margialia align support shrink
  (advice-add 'marginalia--align
              :before
              (lambda (&rest r) (setq marginalia--cand-width-max 0)))

  (use-package consult
    :bind
    (("C-s" . consult-line) ;; replace isearch-forward
     ("C-r" . consult-line) ;; replace isearch-backward
     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
     ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
     ("C-c o" . consult-outline)               ;; Alternative: consult-org-heading
     ("C-c m" . consult-mark)
     ("C-c n" . consult-mark))
    :hook (completion-list-mode . consult-preview-at-point-mode))

  (use-package
    embark
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    ;;(add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;;(setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  (use-package embark-consult
    ;; only need to install it, embark loads it after consult if found
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package
    corfu
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary t)   ;; Never quit at completion boundary
    (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    (corfu-preselect 'first)      ;; Preselect the prompt
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-scroll-margin 10)        ;; Use scroll margin
    (corfu-preview-current t)
    (corfu-indexed-mode)
    (corfu-bar-width 0)
    (corfu--preview-ov t)
    (corfu--frame)
    :bind (:map corfu-map
                ("C-q" . corfu-quick-insert))
    :init
    (global-corfu-mode))
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
;;  (defun convert-to-char(numbered)
;;     (format " %c %d" (aref "fjdkslaghi" (- numbered 1)) numbered))
;;
;;  (use-package
;;    company
;;    :ensure t
;;    :config (setq company-idle-delay 0)
;;    (setq company-minimum-prefix-length 3)
;;    (setq company-show-numbers t)
;;    (setq company-show-numbers-function #'convert-to-char)
;;    (global-company-mode t))
;;
;;  (defun company-complete-char(char)
;;    ;; list is for set "char" argument
;;    (interactive
;;      (list (let* ((type (event-basic-type last-command-event)))
;;                  (if (characterp type) type ?\;))))
;;
;;    (let* ((char-list (subseq '(?f ?j ?d ?k ?s ?l ?a ?g ?h ?i) 0
;;                              (min 10 (- company-candidates-length
;;                                         company-tooltip-offset))))
;;           (n (cl-position char char-list)))
;;      (when (and (company-manual-begin)
;;                 (cl-find char char-list))
;;            (company-finish (nth (+ n company-tooltip-offset)
;;                              company-candidates)))))
;;  ;; bind keys
;;  (dolist (char '(?f ?j ?d ?k ?s ?l ?a ?g ?h ?i))
;;    (define-key company-active-map
;;                (read-kbd-macro (format "M-%c" char))
;;                'company-complete-char))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package
    projectile
    :ensure t
    :config (projectile-global-mode))
#+END_SRC
* Tree-Sitter
#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :init
    (progn (setq treesit-font-lock-level 4))
    :config
    (global-treesit-auto-mode))
#+END_SRC
* C++
** Basic C/C++ mode initialize
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.ic\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.yy\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.c\\'" . c++-mode))
  (use-package
    modern-cpp-font-lock
    :ensure t
    :config (modern-c++-font-lock-global-mode t))

  (use-package
    clang-format
    :ensure t
    :bind ("C-M-q" . clang-format-region))

  (use-package
    google-c-style
    :ensure t
    :config (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent))

  (defun my-compile ()
    "compile current buffer automatically."
    (interactive)
    (setq compilation-read-command nil)
    (compile "make -k -j 12")
    (setq compilation-read-command t))
  (global-set-key (kbd "C-x c") 'my-compile)

#+END_SRC
** Initialize cmake mode
#+BEGIN_SRC emacs-lisp
  (use-package
    cmake-mode
    :ensure t)
#+END_SRC
** Mysql cmake
#+BEGIN_SRC emacs-lisp
  (defun mysql_cmake()
    (interactive)
    (projectile-run-async-shell-command-in-root "~/.bin/mysql_cmake.sh"))
#+END_SRC

* LSP Mode
#+BEGIN_SRC emacs-lisp
  (defun my-init-lsp()
    (setq read-process-output-max (* 2048 1024))
    (setenv "LSP_USE_PLISTS" "true")
    (setq lsp-use-plists 1)
    (setq flymake-mode nil)

    (use-package
      lsp-mode
      :ensure t
      :hook ((c-mode . lsp-defferred)
             (c++-mode . lsp-deferred)
             (json-mode . lsp-deferred)
             (perl-mode . lsp-deferred)
             (cmake-mode . lsp-deferred)
             (python-mode . lsp-deferred)
             (lsp-mode . lsp-enable-which-key-integration))
      :bind (:map lsp-command-map
                  ("F" . projectile-find-file)
                  ("f" . projectile-find-file-dwim)
                  ("D" . lsp-find-definition)
                  ("R" . lsp-find-references))
      :custom
      (lsp-keymap-prefix "C-l")
      (lsp-use-plists 1)
      (lsp-idle-delay 0.1)
      (lsp-completion-provider :capf)
      (lsp-enable-folding t)
      (lsp-enable-snippet t)
      (lsp-symbol-highlighting-skip-current nil)
      (lsp-semantic-highlighting nil)
      (lsp-server-trace "verbose")
      (lsp-clients-clangd-args
       '("-j=4" "-background-index" "-log=verbose"
         "-all-scopes-completion" "-suggest-missing-includes"))
      :commands lsp lsp-deferred)

    (use-package
      lsp-ui
      :ensure t
      :bind (:map lsp-command-map
                  ("m" . lsp-ui-imenu)
                  ("i" . lsp-ui-doc-glance)
                  ("p" . lsp-ui-find-prev-reference)
                  ("n" . lsp-ui-find-next-reference)
                  ("d" . lsp-ui-peek-find-definitions)
                  ("r" . lsp-ui-peek-find-references)
                  ("s" . lsp-ui-find-workspace-symbol-at-point))
      :custom
      (lsp-ui-sideline-show-code-actions nil)
      (lsp-ui-doc-enable nil)
      (lsp-ui-peek-always-show t)
      (lsp-ui-peek-list-width 30)
      (lsp-ui-peek-peek-height 40)
      :commands lsp-ui-mdode)

    (use-package
      consult-lsp)
    (use-package
      lsp-treemacs
      :ensure t
      :commands lsp-treemacs-errors-list)
    (use-package
      dap-mode
      :ensure t)
    (custom-set-variables '(lsp-ui-doc-enable nil)))

  (my-init-lsp)
#+END_SRC
* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :config (setq avy-keys '(?a ?f ?j ?d ?k ?r ?u ?t ?y ?e ?i ?w ?o ?q ?p
                               ?v ?m ?b ?n ?c ?s ?l ?\ ))
      :custom (avy-style 'pre)
              (avy-goto-word-0-regexp "[^ \r\n\t.(]+")
              (avy-background t)
      :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs

    (defun avy-goto-word-crt-line ()
      "Jump to a word start on the current gline only."
      (interactive)
      (avy-with avy-goto-word-0 (avy-goto-word-0 nil (line-beginning-position)
                                                 (line-end-position))))
    (global-set-key (kbd "M-f") 'avy-goto-word-crt-line)
    (global-set-key (kbd "M-b") 'avy-goto-word-0)
    (global-set-key (kbd "M-n") 'avy-goto-line-below)
    (global-set-key (kbd "M-p") 'avy-goto-line-above)
  #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC

  #+RESULTS:
* Misc packages
 #+BEGIN_SRC emacs-lisp
  ; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
   :ensure t
   :config (global-hungry-delete-mode)
   :init (setq hungry-delete-except-modes
            '(help-mode minibuffer-mode minibufffer-inactive-mode))
  )

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))

  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp
  ; mark and edit all copies of the marked region simultaniously.
  (use-package iedit
  :ensure t)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  #+END_SRC


  #+RESULTS:
  : narrow-or-widen-dwim

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :init
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil)

  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))

#+END_SRC

#+RESULTS:

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)
  ))
;; ?? What is its purpose

(use-package git-gutter
  :ensure t
  :init
  (global-git-gutter-mode +1))

(defun magit-diff-master()
  (interactive)
  (magit-diff-range "master"))

(global-set-key (kbd "M-g g") 'hydra-git-gutter/body)
(global-set-key (kbd "M-g b") 'magit-blame-addition)
(global-set-key (kbd "M-g a") 'magit-blame-quit)
(global-set-key (kbd "M-g s") 'magit-show-commit)
(global-set-key (kbd "M-g d") 'magit-diff-master)

(use-package git-timemachine
  :ensure t)

(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                              :hint nil)
    "
  Git gutter:
    _j_: next hunk        _s_tage hunk     _q_uit
    _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _h_: first hunk
    _l_: last hunk        set start _R_evision
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
         :color blue))



#+END_SRC
* Load other files
   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (f)
       "load the elisp file only if it exists and is readable"
       (if (file-readable-p f)
           (load-file f)))

     (load-if-exists "~/Dropbox/shared/mu4econfig.el")
     (load-if-exists "~/Dropbox/shared/not-for-github.el")

   #+END_SRC

   #+RESULTS:
   : t
* Testing Stuff
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(add-hook 'mu4e-compose-mode-hook 'turn-on-flyspell)
(add-hook 'mu4e-compose-mode-hook 'turn-on-auto-fill)

#+END_SRC
* eshell stuff
#+BEGIN_SRC emacs-lisp

  (use-package shell-switcher
    :ensure t
    :config
    (setq shell-switcher-mode t)
    :bind (("C-'" . shell-switcher-switch-buffer)
	   ("C-x 4 '" . shell-switcher-switch-buffer-other-window)
	   ("C-M-'" . shell-switcher-new-shell)))


  ;; Visual commands
  (setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
				 "ncftp" "pine" "tin" "trn" "elm" "vim"
				 "nmtui" "alsamixer" "htop" "el" "elinks"
				 ))
                                 (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
  (setq eshell-list-files-after-cd t)
  (defun eshell-clear-buffer ()
    "Clear terminal"
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
  (add-hook 'eshell-mode-hook
	    '(lambda()
	       (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (magit-status default-directory)
    nil)

 ;; smart display stuff
(require 'eshell)
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)

(add-hook 'eshell-mode-hook
  (lambda ()
    (eshell-smart-initialize)))
;; eshell here
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

(global-set-key (kbd "C-!") 'eshell-here)

#+END_SRC

Eshell prompt
#+BEGIN_SRC emacs-lisp
 (defcustom dotemacs-eshell/prompt-git-info
  t
  "Turns on additional git information in the prompt."
  :group 'dotemacs-eshell
  :type 'boolean)

;; (epe-colorize-with-face "abc" 'font-lock-comment-face)
(defmacro epe-colorize-with-face (str face)
  `(propertize ,str 'face ,face))

(defface epe-venv-face
  '((t (:inherit font-lock-comment-face)))
  "Face of python virtual environment info in prompt."
  :group 'epe)

  (setq eshell-prompt-function
      (lambda ()
        (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
                (when (and dotemacs-eshell/prompt-git-info
                           (fboundp #'vc-git-branches))
                  (let ((branch (car (vc-git-branches))))
                    (when branch
                      (concat
                       (propertize " [" 'face 'font-lock-keyword-face)
                       (propertize branch 'face 'font-lock-function-name-face)
                       (let* ((status (shell-command-to-string "git status --porcelain"))
                              (parts (split-string status "\n" t " "))
                              (states (mapcar #'string-to-char parts))
                              (added (count-if (lambda (char) (= char ?A)) states))
                              (modified (count-if (lambda (char) (= char ?M)) states))
                              (deleted (count-if (lambda (char) (= char ?D)) states)))
                         (when (> (+ added modified deleted) 0)
                           (propertize (format " +%d ~%d -%d" added modified deleted) 'face 'font-lock-comment-face)))
                       (propertize "]" 'face 'font-lock-keyword-face)))))
                (when (and (boundp #'venv-current-name) venv-current-name)
                  (concat
                    (epe-colorize-with-face " [" 'epe-venv-face)
                    (propertize venv-current-name 'face `(:foreground "#2E8B57" :slant italic))
                    (epe-colorize-with-face "]" 'epe-venv-face)))
                (propertize " $ " 'face 'font-lock-constant-face))))
#+END_SRC
#+RESULTS:
: t
* Elfeed
#+BEGIN_SRC emacs-lisp :tangle no

    (setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")


    (defun elfeed-mark-all-as-read ()
	  (interactive)
	  (mark-whole-buffer)
	  (elfeed-search-untag-all-unread))


    ;;functions to support syncing .elfeed between machines
    ;;makes sure elfeed reads index from disk before launching
    (defun bjm/elfeed-load-db-and-open ()
      "Wrapper to load the elfeed db from disk before opening"
      (interactive)
      (elfeed-db-load)
      (elfeed)
      (elfeed-search-update--force))

    ;;write to disk when quiting
    (defun bjm/elfeed-save-db-and-bury ()
      "Wrapper to save the elfeed db to disk before burying buffer"
      (interactive)
      (elfeed-db-save)
      (quit-window))




    (use-package elfeed
      :ensure t
      :bind (:map elfeed-search-mode-map
		  ("q" . bjm/elfeed-save-db-and-bury)
		  ("Q" . bjm/elfeed-save-db-and-bury)
		  ("m" . elfeed-toggle-star)
		  ("M" . elfeed-toggle-star)
		  ("j" . mz/make-and-run-elfeed-hydra)
		  ("J" . mz/make-and-run-elfeed-hydra)
		  )
:config
    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'star))

      )

    (use-package elfeed-goodies
      :ensure t
      :config
      (elfeed-goodies/setup))


    (use-package elfeed-org
      :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/Dropbox/shared/elfeed.org")))





  (defun z/hasCap (s) ""
	 (let ((case-fold-search nil))
	 (string-match-p "[[:upper:]]" s)
	 ))


  (defun z/get-hydra-option-key (s)
    "returns single upper case letter (converted to lower) or first"
    (interactive)
    (let ( (loc (z/hasCap s)))
      (if loc
	  (downcase (substring s loc (+ loc 1)))
	(substring s 0 1)
      )))

  ;;  (active blogs cs eDucation emacs local misc sports star tech unread webcomics)
  (defun mz/make-elfeed-cats (tags)
    "Returns a list of lists. Each one is line for the hydra configuratio in the form
       (c function hint)"
    (interactive)
    (mapcar (lambda (tag)
	      (let* (
		     (tagstring (symbol-name tag))
		     (c (z/get-hydra-option-key tagstring))
		     )
		(list c (append '(elfeed-search-set-filter) (list (format "@6-months-ago +%s" tagstring) ))tagstring  )))
	    tags))





  (defmacro mz/make-elfeed-hydra ()
    `(defhydra mz/hydra-elfeed ()
       "filter"
       ,@(mz/make-elfeed-cats (elfeed-db-get-all-tags))
       ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
       ("M" elfeed-toggle-star "Mark")
       ("A" (elfeed-search-set-filter "@6-months-ago") "All")
       ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
       ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
       ("q" nil "quit" :color blue)
       ))




    (defun mz/make-and-run-elfeed-hydra ()
      ""
      (interactive)
      (mz/make-elfeed-hydra)
      (mz/hydra-elfeed/body))


#+END_SRC

#+RESULTS:
: mz/make-and-run-elfeed-hydra

* Dumb jump
#+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config
:init
(dumb-jump-mode)
  :ensure
)



#+END_SRC
* Origami folding
#+BEGIN_SRC emacs-lisp
(use-package origami
:ensure t)
#+END_SRC

#+RESULTS:

* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package
    smartparens-config
    :ensure smartparens
    :config (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    :bind (("C-M-a" . sp-beginning-of-sexp)
           ("C-M-e" . sp-end-of-sexp)
           ("C-S-f" . sp-forward-symbol)
           ("C-S-b" . sp-backward-symbol)
           ("C-M-t" . sp-transpose-sexp)
           ("C-M-k" . sp-kill-sexp)
           ("C-k"   . sp-kill-hybrid-sexp)
           ("M-k"   . sp-backward-kill-sexp)
           ("C-M-w" . sp-copy-sexp)
           ("C-M-d" . delete-sexp)
           ;; conflict with ansi-term C-<backspace>
           ;; ("M-<backspace>" . backward-kill-word)
           ("C-<backspace>" . sp-backward-kill-word)
           ([remap sp-backward-kill-word] . backward-kill-word)
           ("M-[" . sp-backward-unwrap-sexp)
           ("M-]" . sp-unwrap-sexp)
           ("C-x C-t" . sp-transpose-hybrid-sexp)
           ("C-c ("  . wrap-with-parens)
           ("C-c ["  . wrap-with-brackets)
           ("C-c {"  . wrap-with-braces)
           ("C-c `"  . wrap-with-back-quotes)))
#+END_SRC

* Stuff to refile as I do more Screencasts
#+BEGIN_SRC emacs-lisp
  ;;--------------------------------------------------------------------------
  ;; latex
  (use-package
    tex
    :ensure auctex)
  ;;--------------------------------------------
#+END_SRC

* Prodigy
#+BEGIN_SRC emacs-lisp
    (use-package prodigy
    :ensure t
    :config
    (load-if-exists "~/Dropbox/shared/prodigy-services.el")
)
#+END_SRC

#+RESULTS:
: t

* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))
  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
)

#+END_SRC

#+RESULTS:

* misc
#+BEGIN_SRC emacs-lisp
(defun z/nikola-deploy () ""
(interactive)
(venv-with-virtualenv "blog" (shell-command "cd ~/gh/cestlaz.github.io; nikola github_deploy"))
)

(defun z/swap-windows ()
""
(interactive)
(ace-swap-window)
(aw-flip-window)
)

#+END_SRC

#+RESULTS:
: z/nikola-deploy
* Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
:ensure t
:config
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

)

#+END_SRC
* personal keymap
#+BEGIN_SRC emacs-lisp
;; unset C- and M- digit keys
;;(dotimes (n 10)
;;  (global-unset-key (kbd (format "C-%d" n)))
;;  (global-unset-key (kbd (format "M-%d" n)))
;;  )
;;
;;
;;(defun org-agenda-show-agenda-and-todo (&optional arg)
;;  (interactive "P")
;;  (org-agenda arg "c")
;;  (org-agenda-fortnight-view))
;;
;;
;;;; set up my own map
;;(define-prefix-command 'z-map)
;;(global-set-key (kbd "C-1") 'z-map)
;;(define-key z-map (kbd "c") 'multiple-cursors-hydra/body)
;;(define-key z-map (kbd "m") 'mu4e)
;;(define-key z-map (kbd "e") 'bjm/elfeed-load-db-and-open)
;;(define-key z-map (kbd "1") 'org-global-cycle)
;;(define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
;;(define-key z-map (kbd "g") 'counsel-ag)
;;
;;(define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
;;(define-key z-map (kbd "i") (lambda () (interactive) (find-file "~/Dropbox/orgfiles/i.org")))
;;(define-key z-map (kbd "f") 'origami-toggle-node)
;;(define-key z-map (kbd "w") 'z/swap-windows)
;;
;;
;;  (setq user-full-name "Mike Zamansky"
;;                          user-mail-address "mz631@hunter.cuny.edu")
;;  ;;--------------------------------------------------------------------------
;;
;;
;;  (global-set-key (kbd "\e\ei")
;;                  (lambda () (interactive) (find-file "~/Dropbox/orgfiles/i.org")))
;;
;;  (global-set-key (kbd "\e\el")
;;                  (lambda () (interactive) (find-file "~/Dropbox/orgfiles/links.org")))
;;
;;  (global-set-key (kbd "\e\ec")
;;                  (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))
;;



#+END_SRC

#+RESULTS:
: origami-toggle-node

#  LocalWords:  DIRED Javascript Screencasts Autocomplete
* shell-pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
:ensure t
  :bind (("s-t" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ehell" "eshell" (lambda nil (eshell)))))
  (setq shell-pop-term-shell "eshell")
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))


#+END_SRC
* Wgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep
:ensure t
)

#+END_SRC

#+RESULTS:
* Regex
#+BEGIN_SRC emacs-lisp
(use-package pcre2el
:ensure t
:config
(pcre-mode)
)
#+END_SRC
* Music
#+BEGIN_SRC emacs-lisp
(use-package simple-mpc
:ensure t)
(use-package mingus
:ensure t)

#+END_SRC
* Atomic Chrome (edit in emacs)
#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
:ensure t
:config (atomic-chrome-start-server))
(setq atomic-chrome-buffer-open-style 'frame)
#+END_SRC
* PDF tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
  :ensure t)
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)
#+END_SRC
* Misc
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

(setq auto-window-vscroll nil)

#+END_SRC
